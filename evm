#!/usr/bin/env bash
#
# Elasticsearch Version Manager
# Purpose: Managing multiple Elasticsearch versions on your local development machine
# Licence: Apache License, version 2 (http://www.apache.org/licenses/LICENSE-2.0)
# Source: https://github.com/duydo/evm
# Version: 0.1.9
# Author: Duy Do (duydo)

readonly EVM_VERSION="0.1.9"

readonly OS="$(uname | tr '[:upper:]' '[:lower:]')"
readonly OS_TYPE="$(uname -m)"

SCRIPT="$0"
if [[ -h "${SCRIPT}" ]]; then
  SCRIPT="$(readlink "${SCRIPT}")"
fi

readonly EVM_NAME=$(basename "${SCRIPT}")
readonly EVM_HOME=${EVM_HOME:-"${HOME}/.${EVM_NAME}"}

readonly ES_NAME="elasticsearch"
readonly ES_HOME="${EVM_HOME}/${ES_NAME}"
readonly ES_CMD="${ES_HOME}/bin/${ES_NAME}"
readonly ES_PLUGIN_CMD="${ES_HOME}/bin/${ES_NAME}-plugin"
readonly ES_1X_PLUGIN_CMD="${ES_HOME}/bin/plugin"
readonly PID_FILE="${EVM_HOME}/${ES_NAME}.pid"

# Sub commands
readonly START_CMD='start'
readonly STOP_CMD='stop'
readonly STATUS_CMD='status'
readonly INSTALL_CMD='install'
readonly REMOVE_CMD='remove'
readonly LIST_CMD='list'
readonly USE_CMD='use'
readonly PLUGIN_CMD='plugin'
readonly VERSION_CMD='version'
readonly WHICH_CMD='which'

readonly ES_DOWNLOAD_REPOS=("https://artifacts.elastic.co/downloads/${ES_NAME}" "https://download.elastic.co/${ES_NAME}/${ES_NAME}")
readonly DOWNLOAD_EXT="tar.gz"
readonly DOWNLOAD_CHECKSUM_EXT="sha1"

# First use?
if [[ ! -d "${EVM_HOME}" ]]; then
  mkdir -p "${EVM_HOME}"
fi

_abort(){
  echo "${1:-"Something went wrong! Use evm -h for help."}"; exit 1
}

_abort_if_too_many_arguments() {
  if [[ "$#" -gt 0 ]]; then
    _abort "Invalid arguments: '$@'. Use evm -h for help."
  fi
}

_check_es_version() {
  local version="$1"
  if [[ -z "${version}" ]]; then
    _abort "A version is required."
  fi
  if [[ ! "${version}" =~ ^([0-9]+\.){2}([0-9]+)(\-[a-z0-9]+)*$ ]]; then
    _abort "Invalid version: '${version}'."
  fi
}

_get_current_es_version() {
  local path="$(find "${EVM_HOME}" -type l -name "${ES_NAME}" -exec readlink {} +)"
  if [[ ! -z "${path}" ]]; then
    local current_version="$(basename "${path}")"
    echo "${current_version#*-}"
  fi
}

_get_current_es_pid() {
  ps -ef | grep -i [E]lasticsearch.pid | awk '{print $2}'
}

_check_curl_if_available(){
  hash curl 2>/dev/null || _abort "The 'curl' program is required, please install 'curl' first."
}

_detect_checksum_cmd() {
  local cmd="shasum"
  hash "${cmd}" 2>/dev/null || cmd="sha1sum"; hash "${cmd}" 2>/dev/null || _abort "sha1sum or shasum command not found."
  echo "${cmd}"
}

_get_downloaded_file_name(){
  local version="$1"
  local version_array=(${version//./ })
  local os_type="$OS_TYPE"
  local m1_platform="arm64"
  if [[ ${version_array[0]} -ge 7 ]] ; then
    if [[ "$OS_TYPE" == "$m1_platform" ]]; then
      if [[ (${version_array[0]} -eq 7) && (${version_array[1]} -le 15) ]] ; then
        os_type="x86_64"
      else
        os_type="aarch64"
      fi
    fi
    echo "${ES_NAME}-${version}-${OS}-${os_type}.${DOWNLOAD_EXT}"
  else
    echo "${ES_NAME}-${version}.${DOWNLOAD_EXT}"
  fi
}

_download_es() {
  _check_curl_if_available

  local version="$1"
  local file="$(_get_downloaded_file_name "$version")"
  local output_file="${EVM_HOME}/${file}"
  local curl_opts="--fail --connect-timeout 60 --max-time 3600"
  for repo in "${ES_DOWNLOAD_REPOS[@]}"; do
    local url="${repo}/${file}"
    if curl --head --silent ${curl_opts} "${url}" > /dev/null; then
      echo "==> Downloading ${url}"
      curl -# -Lo "${output_file}" ${curl_opts} "${url}" || _abort "Could not download file ${url}"

      echo "==> Verifying checksum for '${output_file}'"
      local sha1_urls=("${url}.sha1" "${url}.sha1.txt")
      for sha1_url in "${sha1_urls[@]}"; do
        if curl --head --silent ${curl_opts} "${sha1_url}" > /dev/null; then
          local sha1="$(curl -LSs ${curl_opts} "${sha1_url}" | awk '{print $1}')"
          local check_sum_cmd="$(_detect_checksum_cmd)"
          local downloaded_sha1="$("${check_sum_cmd}" "${output_file}" | awk '{print $1}')"
          if [[ ! "${downloaded_sha1}" == "${sha1}" ]]; then
            _abort "Checksum mismatched for '${output_file}'. Expected: ${sha1}, Received: ${downloaded_sha1}"
          fi
          break
        fi
      done
      break
    fi
  done

  if [[ ! -f "${output_file}" ]]; then
    _abort "Version ${version} not found."
  fi
}

install_es() {
  local version="$1"; shift
  _abort_if_too_many_arguments "$@"
  _check_es_version "${version}"

  if [[ -d "${ES_HOME}-${version}" ]]; then
    _abort "Elasticsearch ${version} has been already installed."
  fi

  echo "==> Try to install Elasticsearch ${version}"

  _download_es "${version}"

  local install_file="${EVM_HOME}/$(_get_downloaded_file_name "$version")"
  echo "==> Installing ${install_file} into ${EVM_HOME}/$ES_NAME-${version}"
  tar -xzf "${install_file}" -C "${EVM_HOME}/" || _abort "Could not extract the ${install_file}, please try to install again."
  # Cleanup: remove the downloaded files
  rm -rf "${install_file}" || echo "Clean failed. Could not remove the downloaded file ${install_file}!"

  local current_version="$(_get_current_es_version)"
  if [[ -z "${current_version}" ]]; then
       use_version "${version}"
  fi

  echo "Elasticsearch ${version} has been installed."
}

use_version() {
  local version="$1"; shift
  _abort_if_too_many_arguments "$@"
  _check_es_version "${version}"

  local use_version="${ES_HOME}-${version}"
  if [[ ! -d "${use_version}" ]]; then
    _abort "Elasticsearch ${version} not found."
  fi

  ln -sfn "${use_version}" "${ES_HOME}" || _abort "Could not create symbolic link ${ES_HOME} => ${use_version}"
  echo "Now using Elasticsearch ${version}"
}

start_es() {
  local pid="$(_get_current_es_pid)"
  if [[ ! -z "${pid}" ]]; then
    _abort "Elasticsearch is already running."
  fi

  local current_version="$(_get_current_es_version)"
  if [[ -z "${current_version}" ]]; then
    _abort "No Elasticsearch version in use."
  fi
  local cmd_opts="-d -p "${PID_FILE}""
  while getopts ":c:" option; do
    case "${option}" in
      c)
        local conf_path="$OPTARG"
        if [[ ! -d "${conf_path}" ]]; then
          _abort "Invalid config path: '${conf_path}'"
        fi
        case "$current_version" in
          1.*|2.*) cmd_opts="${cmd_opts} -Des.path.conf=${conf_path}" ;;
          *) cmd_opts="${cmd_opts} -Epath.conf=${conf_path}" ;;
        esac
        ;;
      :) _abort "The option [-$OPTARG] must not be empty." ;;
      \?) _abort "Unknown option: [-$OPTARG]. Use evm -h for help." ;;
    esac
  done
  shift "$((OPTIND -1))"

  _abort_if_too_many_arguments "$@"

  local cmd="${ES_CMD}"
  if [[ ! -z "${cmd_opts}" ]]; then
    cmd="${cmd} ${cmd_opts}"
  fi

  echo "==> Starting Elasticsearch ${current_version}, please wait..."
  ${cmd}
  while true; do
    if hash nc 2>/dev/null; then
        if nc -z -w300ms 0.0.0.0 9300 2>/dev/null; then
            echo "Elasticsearch $(_get_current_es_version) has been started."
            break;
        fi
    else
        if [[ -f "${PID_FILE}" ]]; then
            echo "Elasticsearch $(_get_current_es_version) has been started."
            break;
        fi
    fi
  done
}

stop_es() {
  local pid="$(_get_current_es_pid)"
  if [[ -z "${pid}" ]]; then
    _abort "Elasticsearch is not running."
  fi

  echo "==> Stopping Elasticsearch"
  kill -SIGTERM "${pid}" || _abort "Could not stop Elasticsearch."
  echo "Elasticsearch has been stopped."
}


print_es_running_status() {
  local pid="$(_get_current_es_pid)"
  if [[ ! -z "${pid}" ]]; then
    echo "Elasticsearch $(_get_current_es_version) is running."
  else
    echo "Elasticsearch is not running."
  fi
}

remove_es() {
  local version="$1"; shift
  _abort_if_too_many_arguments "$@"
  _check_es_version "${version}"

  local removed_version_folder="${ES_HOME}-${version}"
  if [[ ! -d "${removed_version_folder}" ]]; then
    _abort "Elasticsearch ${version} not found."
  fi

  local current_version="$(_get_current_es_version)"
  if [[ "${version}" = "${current_version}" ]]; then
    _abort "Could not remove Elasticsearch ${version}, it is in use."
  fi

  rm -rf "${removed_version_folder}" || _abort "Could not remove the version ${version}."
  echo "Elasticsearch ${version} has been removed."
}

manage_es_plugin() {
  local current_version="$(_get_current_es_version)"
  if [[ -z "${current_version}" ]]; then
    _abort "No Elasticsearch version in use. Use evm -h for help."
  fi

  local list_opt="${LIST_CMD}"
  local install_opt="${INSTALL_CMD}"
  local remove_opt="${REMOVE_CMD}"
  case "${current_version}" in
    1.*)
      cmd="${ES_1X_PLUGIN_CMD}"
      list_opt="--${list_opt}"
      install_opt="--${install_opt}"
      remove_opt="--${remove_opt}"
      ;;
    2.*) cmd="${ES_1X_PLUGIN_CMD}" ;;
    *) cmd="${ES_PLUGIN_CMD}" ;;
  esac
  if [ ! -x "$cmd" ]; then
    _abort "The Elasticsearch plugin command not found or unexecutable."
  fi

  local plugin_sub_cmd="$1"; shift
  case "$plugin_sub_cmd" in
    ${LIST_CMD})
      _abort_if_too_many_arguments "$@"
      cmd="$cmd $list_opt"
      ;;
    ${INSTALL_CMD})
      local plugin="$1"; shift
      _abort_if_too_many_arguments "$@"
      if [[ -z "${plugin}" ]]; then
        _abort "A plugin is required."
      fi
      cmd="$cmd $install_opt ${plugin}"
      ;;
    ${REMOVE_CMD})
      local plugin="$1"; shift
      _abort_if_too_many_arguments "$@"
      if [[ -z "${plugin}" ]]; then
        _abort "A plugin is required."
      fi
      cmd="$cmd $remove_opt ${plugin}"
      ;;
    *)
      _abort "Unknown command: '${plugin_sub_cmd}'. Use evm -h for help."
      ;;
  esac
  ${cmd}
}

list_es_versions() {
  local current_version="$(_get_current_es_version)"
  for e in $(find "${EVM_HOME}" -maxdepth 1 -mindepth 1 -type d -name "${ES_NAME}-*" | sort -nr); do
    local version="$(basename "${e}")"
    version="$(echo "${version#*-}")"
    if [[ "${current_version}" = "${version}" ]]; then
      echo -e "\033[0;32m* ${version}\033[0m"
    else
      echo -e "  ${version}"
    fi
  done
}

print_evm_version(){
  echo "${EVM_NAME} ${EVM_VERSION}"
}

print_current_es_version() {
  _get_current_es_version
}

print_es_path(){
  local version="${1:-$(_get_current_es_version)}"
  _check_es_version "${version}"

  local path="$ES_HOME-$version"
  if [[ -d "${path}" ]]; then
    echo "${path}"
  else
    echo "Elasticsearch ${version} not found."
  fi
}

print_usage() {
  cat <<'EOF'

Elasticsearch Version Manager

Usage:
 evm -h                                     Print help information
 evm -V                                     Print version information
 evm list                                   List all installed Elasticsearch versions
 evm version                                Print the current activated Elasticsearch version
 evm install <version>                      Install a specific Elasticsearch version
 evm use <version>                          Use a specific Elasticsearch version
 evm remove <version>                       Remove a specific Elasticsearch version if available
 evm which [<version>]                      Print path to installed Elasticsearch version
 evm plugin list                            List all installed Elasticsearch plugins
 evm plugin <install|remove> <plugin>       Install or remove an Elasticsearch plugin
 evm start [-c </path/to/config/dir>]       Start Elasticsearch in the background with a specific config directory (optional)
 evm stop                                   Stop Elasticsearch if it is running
 evm status                                 Check if Elasticsearch is running

Example:
 evm install 5.3.1                          Install Elasticsearch 5.3.1
 evm use 5.3.1                              Use Elasticsearch 5.3.1
 evm start                                  Start Elasticsearch node with the default config directory
 evm start -c /etc/elasticsearch            Start Elasticsearch node with /etc/elasticsearch config directory
 evm status                                 Print Elasticsearch running status
 evm stop                                   Stop Elasticsearch if it is running
 evm plugin install x-pack                  Install the x-pack plugin
 evm plugin remove x-pack                   Remove the x-pack plugin

Note: To uninstall, just remove the $EVM_HOME folder (usually ~/.evm)

EOF
}

main() {
  while getopts ":hV" opt; do
    case "${opt}" in
      h) print_usage; exit 0 ;;
      V) print_evm_version; exit 0 ;;
      \?) _abort "Unknown option: -${OPTARG}. Use evm -h for help." ;;
    esac
  done
  shift "$((OPTIND -1))"
  sub_cmd="$1"; shift
  case "${sub_cmd}" in
    ${INSTALL_CMD}) install_es "$@" ;;
    ${USE_CMD}) use_version "$@" ;;
    ${START_CMD}) start_es "$@" ;;
    ${STOP_CMD})
      _abort_if_too_many_arguments "$@"
      stop_es
      ;;
    ${STATUS_CMD})
      _abort_if_too_many_arguments "$@"
      print_es_running_status
      ;;
    ${REMOVE_CMD}) remove_es "$@" ;;
    ${PLUGIN_CMD}) manage_es_plugin "$@" ;;
    ${WHICH_CMD}) print_es_path "$@" ;;
    ${LIST_CMD})
      _abort_if_too_many_arguments "$@"
      list_es_versions
      ;;
    ${VERSION_CMD})
      _abort_if_too_many_arguments "$@"
      print_current_es_version
      ;;
    *) print_usage ;;
  esac
}

main "$@"
exit $?
