#!/usr/bin/env bash
#
# Elasticsearch Version Manager
# Purpose: Managing multiple Elasticsearch versions on your local development machine
# Licence: Apache License, version 2 (http://www.apache.org/licenses/LICENSE-2.0)
# Source: https://github.com/duydo/evm
# Version: 1.0.0
# Author: Duy Do (duydo)

readonly EVM_VERSION="1.0.0"

readonly OS="$(uname | tr '[:upper:]' '[:lower:]')"
readonly OS_TYPE="$(uname -m)"

SCRIPT="$0"
if [[ -L "${SCRIPT}" ]]; then
  SCRIPT="$(readlink "${SCRIPT}")"
fi

readonly EVM_NAME=$(basename "${SCRIPT}")
readonly EVM_HOME=${EVM_HOME:-"${HOME}/.${EVM_NAME}"}

readonly ES_NAME="elasticsearch"
readonly ES_HOME="${EVM_HOME}/${ES_NAME}"
readonly ES_CMD="${ES_HOME}/bin/${ES_NAME}"
readonly ES_PLUGIN_CMD="${ES_HOME}/bin/${ES_NAME}-plugin"
readonly ES_1X_PLUGIN_CMD="${ES_HOME}/bin/plugin"
readonly PID_FILE="${EVM_HOME}/${ES_NAME}.pid"

# Sub commands
readonly START_CMD='start'
readonly STOP_CMD='stop'
readonly STATUS_CMD='status'
readonly INSTALL_CMD='install'
readonly REMOVE_CMD='remove'
readonly LIST_CMD='list'
readonly USE_CMD='use'
readonly PLUGIN_CMD='plugin'
readonly VERSION_CMD='version'
readonly WHICH_CMD='which'

readonly ES_DOWNLOAD_REPOS=("https://artifacts.elastic.co/downloads/${ES_NAME}" "https://download.elastic.co/${ES_NAME}/${ES_NAME}")
readonly DOWNLOAD_EXT="tar.gz"
readonly DOWNLOAD_CHECKSUM_EXTS=("sha512" "sha1" "sha1.txt")

# First use?
if [[ ! -d "${EVM_HOME}" ]]; then
  mkdir -p "${EVM_HOME}"
fi

_abort() {
  echo "Error: ${*:-"Something went wrong! Use evm -h for help"}" >&2
  exit 1
}

_check_no_args() {
  if [[ "$#" -gt 0 ]]; then
    _abort "Unknown arguments: '$*'"
  fi
}

_check_version() {
  local version="$1"
  if [[ -z "${version}" ]]; then
    _abort "A version is required"
  fi
  if [[ ! "${version}" =~ ^([0-9]+\.){2}([0-9]+)(\-[a-z0-9]+)*$ ]]; then
    _abort "Invalid version: '${version}'. See https://semver.org"
  fi
}

_check_version_in_use() {
  if [[ -z "$(_get_current_version)" ]]; then
    _abort "No version in use. Run 'evm use <version>' first"
  fi
}

_get_current_version() {
  local path="$(find "${EVM_HOME}" -maxdepth 1 -type l -name "${ES_NAME}" -exec readlink {} +)"
  if [[ -n "${path}" ]]; then
    local current_version="$(basename "${path}")"
    echo "${current_version#*-}"
  fi
}

_get_current_pid() {
  ps -ef | awk '/[E]lasticsearch/ {print $2}'
}

_check_curl_if_available() {
  hash curl 2>/dev/null || _abort "The 'curl' program is required, please install 'curl' first"
}

_get_downloaded_file_name() {
  local version="$1"
  local version_array=(${version//./ })
  local os_type="$OS_TYPE"
  local m1_platform="arm64"
  if [[ ${version_array[0]} -ge 7 ]]; then
    if [[ "$OS_TYPE" == "$m1_platform" ]]; then
      if [[ (${version_array[0]} -eq 7) && (${version_array[1]} -le 15) ]]; then
        os_type="x86_64"
      else
        os_type="aarch64"
      fi
    fi
    echo "${ES_NAME}-${version}-${OS}-${os_type}.${DOWNLOAD_EXT}"
  else
    echo "${ES_NAME}-${version}.${DOWNLOAD_EXT}"
  fi
}

_url_exist() {
  local url="$1"
  curl --head --location --silent --fail --output /dev/null --connect-timeout 60 --max-time 60 "${url}"
}

_download_es() {
  _check_curl_if_available
  local version="$1"
  local file="$(_get_downloaded_file_name "$version")"
  local output_file="${EVM_HOME}/${file}"
  for repo in "${ES_DOWNLOAD_REPOS[@]}"; do
    local url="${repo}/${file}"
    if _url_exist "${url}"; then
      echo "==> Downloading ${url}"
      curl --connect-timeout 60 --max-time 3600 -#Lfo "${output_file}" "${url}" || _abort "Could not download ${url}"
      echo "Downloaded ${file}"

      echo "==> Verifying checksum for ${file}"
      local checksum_cmd="shasum"
      for ext in "${DOWNLOAD_CHECKSUM_EXTS[@]}"; do
        local sha_url="${url}.${ext}"
        if _url_exist "${sha_url}"; then
          local checksum="$(curl -LSfs "${sha_url}" | awk '{print $1}')"
          if [[ "${ext}" == "sha512" ]]; then
            # From v6.0.0, Elastic officially uses SHA-512 checksum
            checksum_cmd="${checksum_cmd} -a 512"
          fi
          local downloaded_checksum="$(${checksum_cmd} "${output_file}" | awk '{print $1}')"
          if [[ "${downloaded_checksum}" == "${checksum}" ]]; then
            echo "Checksum matched for ${file}"
          else
            _abort "Checksum mismatched for ${file}. Expected: ${checksum}, Received: ${downloaded_checksum}"
          fi
          break
        fi
      done
      break
    fi
  done

  if [[ ! -f "${output_file}" ]]; then
    _abort "Version ${version} not found"
  fi
}

_evm_start_help() {
  cat <<EOF
  Start Elasticsearch

  Usage: evm start [options]

  Options:
  -h                     Show help
  -E <KeyValuePair>      Configure a setting. See https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html

EOF
}

_evm_plugin_help() {
  cat <<'EOF'
Manage Elasticsearch plugins
Usage: evm plugin [options] [<command>] [<arguments>]

Options:
  -h        Show help information
Commands:
  list                List all installed plugins
  install <plugin>    Install a plugin
  remove <plugin>     Remove an installed plugin from Elasticsearch

EOF
}

_wait_for_es_started_completely() {
  local current_version="$(_get_current_version)"
  local t=0
  until curl -s 0.0.0.0:9200 | grep -q "${current_version}"; do
    if [[ -z "$(_get_current_pid)" ]]; then
      _abort "Cannot start Elasticsearch. Please check if Elasticsearch ${current_version} is compatible with current JVM"
    fi
    sleep 1
    ((t++))
    if [[ ${t} -eq 300 ]]; then
      _abort "It takes too long to start Elasticsearch. Program will exit"
    fi
  done
  echo "Started Elasticsearch ${current_version} successfully"
}

evm_install() {
  local version="${1:-}"
  _check_version "${version}" "Usage: 'evm install <version>' to install"

  shift
  _check_no_args "$@"

  if [[ -d "${ES_HOME}-${version}" ]]; then
    _abort "Elasticsearch ${version} already installed"
  fi

  echo "==> Try to install Elasticsearch ${version}"
  _download_es "${version}"
  local downloaded_file="${EVM_HOME}/$(_get_downloaded_file_name "$version")"
  echo "==> Installing $(basename "${downloaded_file}")"
  tar -xzf "${downloaded_file}" -C "${EVM_HOME}/" || _abort "Could not extract the ${downloaded_file}, please try to install again"
  # Cleanup: remove the downloaded files
  rm -rf "${downloaded_file}" || echo "Clean failed. Could not remove the downloaded file ${downloaded_file}!"

  if [[ -z "$(_get_current_version)" ]]; then
    evm_use "${version}"
  fi

  echo "Installed Elasticsearch ${version} successfully"
}

evm_use() {
  local version="${1:-}"
  _check_version "${version}"

  shift
  _check_no_args "$@"

  if [[ -n "$(_get_current_pid)" ]]; then
    _abort "Elasticsearch $(_get_current_version) is running, stop it before using another version"
  fi

  if [[ "${version}" = "$(_get_current_version)" ]]; then
    _abort "Version ${version} is already in use"
  fi

  local use_version="${ES_HOME}-${version}"
  if [[ ! -d "${use_version}" ]]; then
    echo "Elasticsearch ${version} not found. Below are versions you installed:"
    evm_list | xargs
    exit 0
  fi

  ln -sfn "${use_version}" "${ES_HOME}" || _abort "Could not create symbolic link ${ES_HOME} => ${use_version}"
  echo "Used Elasticsearch ${version}"
}

evm_start() {
  local pid="$(_get_current_pid)"
  if [[ -n "${pid}" ]]; then
    _abort "Elasticsearch already started"
  fi

  _check_version_in_use

  local cmd_opts="-d -p "${PID_FILE}""
  while getopts ":hE:" opt; do
    case "${opt}" in
    h)
      _evm_start_help
      exit 0
      ;;
    E) cmd_opts="${cmd_opts} -${opt}${OPTARG}" ;;
    :) _abort "The option [-$OPTARG] must not be empty" ;;
    \?) _abort "Unknown option: [-$OPTARG]. Use 'evm start -h' for help" ;;
    esac
  done
  shift "$((OPTIND - 1))"

  _check_no_args "$@"

  local current_version="$(_get_current_version)"
  local major="$(echo "${current_version}" | cut -d "." -f 1)"
  if [[ ${major} -gt 7 ]]; then
    if ! echo "${cmd_opts}" | grep -q "xpack.security.enabled"; then
      # Disable security by default
      cmd_opts="${cmd_opts} -Expack.security.enabled=false"
    fi
  fi
  local cmd="${ES_CMD} ${cmd_opts}"
  echo "==> Starting Elasticsearch ${current_version}, please wait..."
  ${cmd} || exit 1
  _wait_for_es_started_completely
}

evm_stop() {
  _check_no_args "$@"

  local pid="$(_get_current_pid)"
  if [[ -z "${pid}" ]]; then
    _abort "Elasticsearch is not started"
  fi

  echo "==> Stopping Elasticsearch..."
  kill -SIGTERM "${pid}" || _abort "Could not stop Elasticsearch"
  until [ -z "$(_get_current_pid)" ]; do sleep 1; done
  echo "Stopped Elasticsearch successfully"

}

evm_status() {
  _check_no_args "$@"
  local pid="$(_get_current_pid)"
  if [[ -n "${pid}" ]]; then
    echo "Elasticsearch $(_get_current_version) is running. PID: ${pid}"
  else
    echo "Elasticsearch is not running"
  fi
}

evm_remove() {
  local version="${1:-}"
  _check_version "${version}"

  shift
  _check_no_args "$@"

  local removed_version_folder="${ES_HOME}-${version}"
  if [[ ! -d "${removed_version_folder}" ]]; then
    _abort "Elasticsearch ${version} not found"
  fi

  local current_version="$(_get_current_version)"
  if [[ "${version}" = "${current_version}" ]]; then
    _abort "Could not remove Elasticsearch ${version}, it is in use"
  fi

  rm -rf "${removed_version_folder}" || _abort "Could not remove the version ${version}"
  echo "Elasticsearch ${version} has been removed"
}

evm_plugin() {

  while getopts ":h" opt; do
    case "${opt}" in
    h)
      _evm_plugin_help
      exit 0
      ;;
    \?) _abort "Unknown option: -${OPTARG}. Run 'evm plugin -h' for help" ;;
    esac
  done
  shift "$((OPTIND - 1))"

  local subcmd="${1:-}"
  if [[ -z "${subcmd}" ]]; then
    _abort "Missing a command. Run 'evm plugin -h' for help"
  fi
  shift

  _check_version_in_use
  local current_version="$(_get_current_version)"

  local list_opt="${LIST_CMD}"
  local install_opt="${INSTALL_CMD}"
  local remove_opt="${REMOVE_CMD}"
  case "${current_version}" in
  1.*)
    cmd="${ES_1X_PLUGIN_CMD}"
    list_opt="--${list_opt}"
    install_opt="--${install_opt}"
    remove_opt="--${remove_opt}"
    ;;
  2.*) cmd="${ES_1X_PLUGIN_CMD}" ;;
  *) cmd="${ES_PLUGIN_CMD}" ;;
  esac
  if [ ! -x "$cmd" ]; then
    _abort "Elasticsearch plugin command not found or non-executable"
  fi

  case "${subcmd}" in
  ${LIST_CMD})
    _check_no_args "$@"
    cmd="$cmd $list_opt"
    ;;
  ${INSTALL_CMD})
    local plugin="${1:-}"
    if [[ -z "${plugin}" ]]; then
      _abort "A plugin is required"
    fi
    shift
    _check_no_args "$@"
    cmd="$cmd $install_opt ${plugin}"
    ;;
  ${REMOVE_CMD})
    local plugin="${1:-}"
    if [[ -z "${plugin}" ]]; then
      _abort "A plugin is required"
    fi
    shift
    _check_no_args "$@"
    cmd="$cmd $remove_opt ${plugin}"
    ;;
  *)
    _abort "Unknown command: '${subcmd}'. Use evm -h for help."
    ;;
  esac
  ${cmd} || exit 1
}

evm_list() {
  _check_no_args "$@"
  local current_version="$(_get_current_version)"
  for e in $(find "${EVM_HOME}" -maxdepth 1 -type d -name "${ES_NAME}-*" | sort -nr); do
    local version="$(basename "${e}")"
    version="${version#*-}"
    if [[ "${current_version}" = "${version}" ]]; then
      echo -e "\033[0;32m${version} (in use)\033[0m"
    else
      echo -e "${version}"
    fi
  done
}

evm_V() {
  echo "${EVM_NAME} ${EVM_VERSION}"
}

evm_version() {
  _check_no_args "$@"
  echo "${ES_NAME} $(_get_current_version)"
}

evm_which() {
  local version="${1:-$(_get_current_version)}"
  _check_version "${version}"

  local path="$ES_HOME-$version"
  if [[ -d "${path}" ]]; then
    echo "${path}"
  else
    echo "Elasticsearch ${version} not found"
  fi
}

evm_help() {
  cat <<'EOF'
Elasticsearch Version Manager

Usage:
 evm -h                                     Print help information
 evm -V                                     Print version information
 evm list                                   List all installed Elasticsearch versions
 evm version                                Print the current activated Elasticsearch version
 evm install <version>                      Install a specific Elasticsearch version
 evm use <version>                          Use a specific Elasticsearch version
 evm remove <version>                       Remove a specific Elasticsearch version if available
 evm which [<version>]                      Print path to installed Elasticsearch version
 evm plugin list                            List all installed Elasticsearch plugins
 evm plugin <install|remove> <plugin>       Install or remove an Elasticsearch plugin
 evm start [-h|-E <KeyValuePair>]           Start Elasticsearch in the background
 evm stop                                   Stop Elasticsearch if it is running
 evm status                                 Check if Elasticsearch is running

Example:
 evm install 5.3.1                          Install Elasticsearch 5.3.1
 evm use 5.3.1                              Use Elasticsearch 5.3.1
 evm start                                  Start Elasticsearch
 evm start -Expack.security.enabled=true    Start Elasticsearch with enabled security
 evm status                                 Print Elasticsearch running status
 evm stop                                   Stop Elasticsearch if it is running
 evm plugin install x-pack                  Install the x-pack plugin
 evm plugin remove x-pack                   Remove the x-pack plugin

Note: To uninstall, just remove the $EVM_HOME folder (usually ~/.evm)

EOF
}

main() {
  while getopts ":hV" opt; do
    case "${opt}" in
    h)
      evm_help
      exit 0
      ;;
    V)
      evm_V
      exit 0
      ;;
    \?) _abort "Unknown option: -${OPTARG}. Run 'evm -h' for help." ;;
    esac
  done
  shift "$((OPTIND - 1))"
  local subcmd="${1:-}"

  if [[ -z "${subcmd}" ]]; then
    _abort "Missing a command. Run 'evm -h' for help"
  fi

  shift
  case "${subcmd}" in
  "${INSTALL_CMD}") evm_install "$@" ;;
  "${USE_CMD}") evm_use "$@" ;;
  "${START_CMD}") evm_start "$@" ;;
  "${STOP_CMD}") evm_stop "$@" ;;
  "${STATUS_CMD}") evm_status "$@" ;;
  "${REMOVE_CMD}") evm_remove "$@" ;;
  "${PLUGIN_CMD}") evm_plugin "$@" ;;
  "${WHICH_CMD}") evm_which "$@" ;;
  "${LIST_CMD}") evm_list "$@" ;;
  "${VERSION_CMD}") evm_version "$@" ;;
  *) _abort "Unknown command: ${subcmd}. Run 'evm -h' for help" ;;
  esac
}

main "$@"
exit $?
